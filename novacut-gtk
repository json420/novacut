#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

import time

from userwebkit import BaseApp
from microfiber import Conflict, NotFound
import dbus

import novacut
from novacut import schema
from novacut import views


session = dbus.SessionBus()


def default_settings():
#    node = {
#        'muxer': {'name': 'oggmux'},
#        'ext': 'ogv',
#        'video': {
#            'encoder': {
#                'name': 'theoraenc',
#                'props': {
#                    'speed-level': 2,
#                },
#            },
#            'filter': {
#                'mime': 'video/x-raw-yuv',
#                'caps': {
#                    'width': 960,
#                    'height': 540,
#                },
#            },
#        },
#        'audio': {
#            'encoder': {
#                'name': 'vorbisenc',
#            },
#        },
#    }
    node = {
        'muxer': {'name': 'avimux'},
        'ext': 'avi',
        'video': {
            'encoder': {
                'name': 'x264enc',
                'props': {
                    'pass': 4,  # Quality-based encoding
                    'quantizer': 18,  # Lower means higher-quality, default=21
                },
            },
            'filter': {
                'mime': 'video/x-raw-yuv',
                'caps': {
                    'width': 1280,
                    'height': 720,
                },
            },
        },
        'audio': {
            'encoder': {
                'name': 'identity',
            },
            'filter': {
                'mime': 'audio/x-raw-int',
            },
        },
    }
    return schema.create_settings(node)


class App(BaseApp):
    name = 'novacut'
    dbname = schema.DB_NAME
    version = novacut.__version__
    title = 'Novacut Video Editor'
    splash = 'splash.html'
    page = 'projects.html'

    proxy_bus = 'org.freedesktop.Dmedia'

    maximize = True

    # For using gtk-recordmydesktop with the select window option:
    # This results in a video that's 1280x720
#    maximize = False
#    width = 1264
#    height = 672

    signals = {
        'create_project': ['title'],
        'project_created': ['project_id'],
        'load_project': ['project_id'],
        'copy_docs': ['src_db_name', 'dst_db_name', 'doc_ids'],
        'thumbnail': ['file_id', 'frames'],
        'thumbnail_finished': ['file_id'],

        'hash_edit': ['project_id', 'node_id'],
        'edit_hashed': ['project_id', 'node_id', 'intrinsic_id'],

        'hash_job': ['intrinsic_id', 'settings_id'],
        'job_hashed': ['intrinsic_id', 'settings_id', 'job_id'],

        'render_job': ['job_id'],
        'job_rendered': ['job_id', 'file_id', 'link'],
    }

    __Renderer = None

    @property
    def Renderer(self):
        if self.__Renderer is None:
            self.__Renderer = session.get_object('com.novacut.Renderer', '/')
            self.__Renderer.connect_to_signal('ThumbnailFinished', self.on_ThumbnailFinished)
            self.__Renderer.connect_to_signal('EditHashed', self.on_EditHashed)
            self.__Renderer.connect_to_signal('JobHashed', self.on_JobHashed)
            self.__Renderer.connect_to_signal('JobRendered', self.on_JobRendered)
        return self.__Renderer

    def on_ThumbnailFinished(self, file_id):
        self.hub.send('thumbnail_finished', file_id)

    def on_EditHashed(self, project_id, node_id, intrinsic_id):
        self.hub.send('edit_hashed', project_id, node_id, intrinsic_id)

    def on_JobHashed(self, intrinsic_id, settings_id, job_id):
        self.hub.send('job_hashed', intrinsic_id, settings_id, job_id)

    def on_JobRendered(self, job_id, file_id, link):
        self.hub.send('job_rendered', job_id, file_id, link)

    def connect_hub_signals(self, hub):
        hub.connect('create_project', self.on_create_project)
        hub.connect('load_project', self.on_load_project)
        hub.connect('copy_docs', self.on_copy_docs)
        hub.connect('thumbnail', self.on_thumbnail)
        hub.connect('hash_edit', self.on_hash_edit)
        hub.connect('hash_job', self.on_hash_job)
        hub.connect('render_job', self.on_render_job)

    def post_env_init(self):
        views.init_views(self.db, views.novacut_main)

    def dmedia_resolver(self, uri):
        return self.proxy.ResolveURI(uri)

    def on_create_project(self, hub, title):
        print('create_project', title)
        doc = schema.create_project(title)
        self.db.post(doc)
        project = self.server.database(doc['db_name'])
        project.put(None)  # Create DB
        project.post(doc)
        views.init_views(project, views.novacut_projects)
        self.load_page('bucket.html#' + doc['_id'])
        #self.hub.send('project_created', doc['_id'])

    def on_load_project(self, hub, project_id):
        print('load_project', project_id)
        doc = self.db.get(project_id)
        doc['atime'] = time.time()
        self.db.save(doc)
        db = self.server.database(schema.project_db_name(project_id))
        views.init_views(db, views.novacut_projects)
        self.load_page('bucket.html#' + project_id)

    def on_copy_docs(self, hub, src_db, dst_db, doc_ids):
        assert isinstance(doc_ids, list)
        docs = []
        for _id in doc_ids:
            doc = self.server.get(src_db, _id, attachments=True)
            del doc['_rev']
            docs.append(doc)
        self.server.post({'docs': docs}, dst_db, '_bulk_docs')

    def on_thumbnail(self, hub, file_id, frames):
        self.Renderer.Thumbnail(file_id, frames)

    def on_hash_edit(self, hub, project_id, root_id):
        print('hash_edit', project_id, root_id)
        self.Renderer.HashEdit(project_id, root_id)

    def on_hash_job(self, hub, intrinsic_id, settings_id):
        print('hash_job', intrinsic_id, settings_id)
        if settings_id is None:
            settings = default_settings()
            settings_id = settings['_id']
            try:
                self.db.save(settings)
            except Conflict:
                pass
        self.Renderer.HashJob(intrinsic_id, settings_id)

    def on_render_job(self, hub, job_id):
        print('render_job', job_id)
        job = self.db.get(job_id)
        if job.get('renders'):
            file_id = list(job['renders'])[0]
            print('using existing render', file_id)
            self.hub.send('job_rendered', job_id, file_id, '')
            return
        self.Renderer.RenderJob(job_id)

app = App()
app.run()
