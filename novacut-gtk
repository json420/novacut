#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

from userwebkit import BaseApp, session
from microfiber import Conflict, NotFound

import novacut
from novacut import schema
from novacut import views


def default_settings():
    node = {
        'muxer': {'name': 'oggmux'},
        'video': {
            'encoder': {
                'name': 'theoraenc',
                'props': {
                    'quality': 52,
                },
            },
            'filter': {
                'mime': 'video/x-raw-yuv',
                'caps': {
                    'width': 960,
                    'height': 540,
                },
            },
        },
    }
    return schema.create_settings(node)


class App(BaseApp):
    name = 'novacut'
    dbname = schema.DB_NAME
    version = novacut.__version__
    title = 'Novacut'
    splash = 'splash.html'
    page = 'projects.html'

    proxy_bus = 'org.freedesktop.Dmedia'

    #maximize = True

    signals = {
        'create_project': ['title'],
        'project_created': ['project_id'],
        'load_project': ['project_id'],
        'copy_docs': ['src_db_name', 'dst_db_name', 'doc_ids'],
        'render': ['project_id', 'root_id', 'settings_id'],
        'render_finished': ['job_id', 'file_id'],
    }

    __Renderer = None

    @property
    def Renderer(self):
        if self.__Renderer is None:
            self.__Renderer = session.get('com.novacut.Renderer', '/')
            self.__Renderer.connect('g-signal', self.on_g_signal)
        return self.__Renderer

    def on_g_signal(self, proxy, sender, signal, params):
        if signal == 'RenderFinished':
            (job_id, file_id) = params.unpack()
            self.hub.send('render_finished', job_id, file_id)

    def connect_hub_signals(self, hub):
        hub.connect('create_project', self.on_create_project)
        hub.connect('load_project', self.on_load_project)
        hub.connect('copy_docs', self.on_copy_docs)
        hub.connect('render', self.on_render)

    def post_env_init(self):
        views.init_views(self.db, views.novacut_main)

    def dmedia_resolver(self, uri):
        return self.proxy.ResolveURI('(s)', uri)

    def on_create_project(self, hub, title):
        print('create_project', title)
        doc = schema.create_project(title)
        self.db.post(doc)
        project = self.server.database(doc['db_name'])
        project.put(None)  # Create DB
        project.post(doc)
        views.init_views(project, views.novacut_projects)
        self.load_page('cutter.html#' + doc['_id'])
        #self.hub.send('project_created', doc['_id'])

    def on_load_project(self, hub, project_id):
        db = self.server.database(schema.project_db_name(project_id))
        views.init_views(db, views.novacut_projects)
        self.load_page('cutter.html#' + project_id)

    def on_copy_docs(self, hub, src_db, dst_db, doc_ids):
        assert isinstance(doc_ids, list)
        docs = []
        for _id in doc_ids:
            doc = self.server.get(src_db, _id, attachments=True)
            del doc['_rev']
            docs.append(doc)
        self.server.post({'docs': docs}, dst_db, '_bulk_docs')

    def on_render(self, hub, project_id, root_id, settings_id):
        project = self.server.database(schema.project_db_name(project_id))
        _id = schema.save_to_intrinsic(root_id, project, self.db)
        if settings_id is None:
            settings = default_settings()
            settings_id = settings['_id']
            try:
                self.db.save(settings)
            except Conflict:
                pass
        job = schema.create_job(_id, settings_id)
        job_id = job['_id']
        try:
            job = self.db.get(job_id)
        except NotFound:
            self.db.save(job)
        if job.get('renders'):
            file_id = list(job['renders'])[0]
            print('using existing render', file_id)
            self.hub.send('render_finished', job_id, file_id)
            return
        self.Renderer.Render('(s)', job_id)


app = App()
app.run()
