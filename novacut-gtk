#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

from urllib.parse import urlparse

from userwebkit import BaseApp
from dmedia import local

import novacut
from novacut import schema
from novacut import views

class App(BaseApp):
    name = 'novacut'
    dbname = schema.DB_NAME
    version = novacut.__version__
    title = 'Novacut'
    splash = 'splash.html'
    page = 'projects.html'

    proxy_bus = 'org.freedesktop.Dmedia'

    #maximize = True

    signals = {
        'create_project': ['title'],
        'project_created': ['project_id'],
    }

    def connect_hub_signals(self, hub):
        hub.connect('create_project', self.on_create_project)

    def post_env_init(self):
        views.init_views(self.db, views.novacut_main)
        self.local = local.LocalSlave(self.env)

    def dmedia_resolver(self, uri):
        if self.env is None:
            return
        try:
            u = urlparse(uri)
            # FIXME: we strip of the time specifier if present, which doesn't
            # seem to work using dmedia: URIs, or perhaps doesn't work yet in
            # WebKitGtk:
            _id = u.path.split('#')[0]
            doc = self.local.get_doc(_id)
            if doc.get('proxies'):
                proxies = doc['proxies']
                for proxy in proxies:
                    try:
                        st = self.local.stat(proxy)
                        return 'file://' + st.name
                    except (local.NoSuchFile, local.FileNotLocal):
                        pass
            st = self.local.stat2(doc)
            return 'file://' + st.name
        except Exception:    
            return ''

    def on_create_project(self, hub, title):
        doc = schema.create_project(title)
        self.db.post(doc)
        self.server.put(None, doc['db_name'])
        self.server.post(doc, doc['db_name'])
        #self.load_page('cutter.html#' + doc['_id'])
        self.hub.send('project_created', doc['_id'])
        

app = App()
app.run()
