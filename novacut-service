#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
DBus service that exposes the render server.
"""

import time
start_time = time.monotonic()

def start_delta():
    return time.monotonic() - start_time


import optparse
import json
import os
from os import path
from threading import Thread
import subprocess
import signal
import logging
from collections import namedtuple

import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
from microfiber import Database, NotFound
from dmedia.units import minsec

import novacut
from novacut import schema

try:
    from gi.repository import Notify
    Notify.init('novacut')
except ImportError:
    Notify = None


BUS = 'com.novacut.Renderer'
IFACE = BUS
DBusGMainLoop(set_as_default=True)
session = dbus.SessionBus()
mainloop = GLib.MainLoop()
log = novacut.configure_logging()


tree = path.dirname(path.dirname(path.abspath(novacut.__file__)))
in_tree = path.isfile(path.join(tree, 'setup.py'))
libdir = (tree if in_tree else '/usr/lib/novacut')
renderer = path.join(libdir, 'novacut-renderer')
assert path.isfile(renderer)
thumbnailer = path.join(libdir, 'novacut-thumbnailer')
assert path.isfile(thumbnailer)


def on_sighup(signum, frame):
    log.info('<SIGHUP>')
    mainloop.quit()

signal.signal(signal.SIGHUP, on_sighup)


def _start_thread(target, *args):
    thread = Thread(target=target, args=args)
    thread.daemon = True
    thread.start()
    return thread
 


Job = namedtuple('Job', 'key worker args success error')


class Service(dbus.service.Object):
    def __init__(self, bus):
        super().__init__(busname, object_path='/')
        self._jobs = {}

    def run(self):
        log.info('Started at monotonic clock time: %s', minsec(int(start_time)))
        self.Dmedia = session.get_object('org.freedesktop.Dmedia', '/')
        self.env = json.loads(self.Dmedia.GetEnv())
        self.env_s = json.dumps(self.env).encode('utf-8')
        mainloop.run()

    def start_job(self, job):
        assert isinstance(job, Job)
        assert isinstance(job.key, tuple)
        assert callable(job.worker)
        assert isinstance(job.args, tuple)
        assert callable(job.success)
        assert callable(job.error)
        if job.key in self._jobs:
            log.info('job %r is already running', job.key)
            return False
        self._jobs[job.key] = _start_thread(self.run_job, job)
        return True

    def remove_job(self, job):
        del self._jobs[job.key]

    def run_job(self, job):
        log.info('executing %r', job.key)
        try:
            signal_args = job.worker(*job.args)
            log.info('success executing %r', job.key)
            GLib.idle_add(self.on_success, job, signal_args)
        except Exception as e:
            log.exception('error executing job %r', job.key)
            GLib.idle_add(self.on_error, job, str(e))

    def on_success(self, job, signal_args):
        self.remove_job(job)
        job.success(*signal_args)

    def on_error(self, job, message):
        self.remove_job(job)
        job.error(*job.key[1:])

    def render_job(self, job_id):
        cmd = [renderer, job_id]
        obj = json.loads(subprocess.check_output(cmd).decode('utf-8'))
        return (job_id, obj['file_id'], obj['link'])

    def hash_edit(self, project_id, node_id):
        db = Database(schema.DB_NAME, self.env)
        project = Database(schema.project_db_name(project_id), self.env)
        intrinsic_id = schema.save_to_intrinsic(node_id, project, db)
        return (project_id, node_id, intrinsic_id)

    def hash_job(self, intrinsic_id, settings_id):
        db = Database(schema.DB_NAME, self.env)
        job = schema.create_job(intrinsic_id, settings_id)
        job_id = job['_id']
        try:
            job = db.get(job_id)
        except NotFound:
            db.save(job)
        return (intrinsic_id, settings_id, job_id)

    def thumbnail(self, file_id, frames):
        cmd = [thumbnailer, file_id]
        cmd.extend(str(f) for f in frames)
        p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
        try:
            p.communicate(input=self.env_s, timeout=30)
        except subprocess.TimeoutExpired:
            log.error('Timeout calling %r', cmd)
            p.kill()
            p.communicate()
            raise
        if p.returncode != 0:
            raise Exception('returncode %d from %r', p.returncode, cmd)
        return (file_id,)

    @dbus.service.method(IFACE, in_signature='', out_signature='s')
    def Version(self):
        """
        Return Novacut version.
        """
        log.info('Version()')
        return novacut.__version__

    @dbus.service.method(IFACE, in_signature='', out_signature='i')
    def Kill(self):
        """
        Kill the `novacut-service` process.
        """
        log.info('Renderer.Kill()')
        delta = int(start_delta())
        log.info('novacut-service was running for %s', minsec(delta))
        mainloop.quit()
        return delta

    @dbus.service.signal(IFACE, signature='ss')
    def Error(self, domain, error):
        log.error('@Error(%r, %r)', domain, error)

    @dbus.service.method(IFACE, in_signature='ss', out_signature='b')
    def HashEdit(self, project_id, node_id):
        project_id = str(project_id)
        node_id = str(node_id)
        log.info('HashEdit(%r, %r)', project_id, node_id)
        key = ('hash_edit', project_id, node_id)
        job = Job(
            key,
            self.hash_edit,
            (project_id, node_id),
            self.EditHashed,
            self.HashEditError,
        )
        return self.start_job(job)

    @dbus.service.signal(IFACE, signature='sss')
    def EditHashed(self, project_id, node_id, intrinsic_id):
        log.info('@EditHashed(%r, %r, %r)', project_id, node_id, intrinsic_id)

    @dbus.service.signal(IFACE, signature='ss')
    def HashEditError(self, project_id, node_id):
        log.info('@HashEditError(%r, %r)', project_id, node_id)

    @dbus.service.method(IFACE, in_signature='ss', out_signature='b')
    def HashJob(self, intrinsic_id, settings_id):
        intrinsic_id = str(intrinsic_id)
        settings_id = str(settings_id)
        log.info('HashJob(%r, %r)', intrinsic_id, settings_id)
        key = ('hash_job', intrinsic_id, settings_id)
        job = Job(
            key,
            self.hash_job,
            (intrinsic_id, settings_id),
            self.JobHashed,
            self.HashJobError,
        )
        return self.start_job(job)

    @dbus.service.signal(IFACE, signature='sss')
    def JobHashed(self, intrinsic_id, settings_id, job_id):
        log.info('@JobHashed(%r, %r, %r)', intrinsic_id, settings_id, job_id)

    @dbus.service.signal(IFACE, signature='ss')
    def HashJobError(self, intrinsic_id, settings_id):
        log.info('@HashJobError(%r, %r)', intrinsic_id, settings_id)

    @dbus.service.method(IFACE, in_signature='s', out_signature='b')
    def RenderJob(self, job_id):
        """
        Render an edit.
        """
        job_id = str(job_id)
        log.info('RenderJob(%r)', job_id)
        key = ('render_job', job_id)
        job = Job(
            key,
            self.render_job,
            (job_id,),
            self.JobRendered,
            self.RenderJobError,
        )
        return self.start_job(job)

    @dbus.service.signal(IFACE, signature='sss')
    def JobRendered(self, job_id, file_id, link):
        log.info('@JobRendered(%r, %r, %r)', job_id, file_id, link)
        if Notify is None:
            return
        n = Notify.Notification.new('Render Complete', link, None)
        n.show()

    @dbus.service.signal(IFACE, signature='s')
    def RenderJobError(self, job_id):
        log.info('@RenderJobError(%r)', job_id)

    @dbus.service.method(IFACE, in_signature='sai', out_signature='b')
    def Thumbnail(self, file_id, frames):
        """
        Generate thumbnails.
        """
        file_id = str(file_id)
        frames = [int(i) for i in frames]
        log.info('Thumbnail(%r, %r)', file_id, frames)
        key = ('thumbnail', file_id)
        job = Job(
            key,
            self.thumbnail,
            (file_id, frames),
            self.ThumbnailFinished,
            self.ThumbnailError,
        )
        return self.start_job(job)

    @dbus.service.signal(IFACE, signature='s')
    def ThumbnailFinished(self, file_id):
        log.info('@ThumbnailFinished(%r)', file_id)

    @dbus.service.signal(IFACE, signature='s')
    def ThumbnailError(self, file_id):
        log.info('@ThumbnailError(%r)', file_id)


parser = optparse.OptionParser(
	version=novacut.__version__,
)
parser.add_option('--bus',
    help='DBus bus name; default is {!r}'.format(BUS),
    default=BUS
)
(options, args) = parser.parse_args()


try:
    busname = dbus.service.BusName(options.bus, session)
    service = Service(busname)
    service.run()
except Exception as e:
    log.exception('Could not start novacut-service!')
    raise e
log.info('Clean shutdown!')
