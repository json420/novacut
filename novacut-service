#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
DBus service that exposes the render server.
"""

import time
start_time = time.time()

import optparse
import json
import os
from os import path
from threading import Thread
import subprocess
import logging
from datetime import datetime

import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GObject
from microfiber import Database, NotFound

import novacut
from novacut import schema

try:
    from gi.repository import Notify
    Notify.init('novacut')
except ImportError:
    Notify = None


BUS = 'com.novacut.Renderer'
IFACE = BUS
HOME = path.abspath(os.environ['HOME'])

GObject.threads_init()
DBusGMainLoop(set_as_default=True)
session = dbus.SessionBus()
log = logging.getLogger()


dirname = path.dirname(path.abspath(__file__))
renderer = path.join(dirname, 'novacut-renderer')
assert path.isfile(renderer)
thumbnailer = path.join(dirname, 'novacut-thumbnailer')
assert path.isfile(thumbnailer)



def _start_thread(target, *args):
    thread = Thread(target=target, args=args)
    thread.daemon = True
    thread.start()
    return thread


class Service(dbus.service.Object):
    def __init__(self, bus):
        self._workers = {}
        self.bus = bus
        self.mainloop = GObject.MainLoop()
        super(Service, self).__init__(session, object_path='/')
        self.busname = dbus.service.BusName(bus, session)

    def run(self):
        self.Dmedia = session.get_object('org.freedesktop.Dmedia', '/')
        self.env = json.loads(self.Dmedia.GetEnv())
        self.mainloop.run()

    def kill(self):
        log.info('kill()')
        self.mainloop.quit()

    def start_worker(self, key, *args):
        if key in self._workers:
            log.info('worker %r is already running', key)
            return False
        log.info('starting worker %r', key)
        self._workers[key] = _start_thread(self.run_worker, key, args)
        return True

    def remove_worker(self, key):
        log.info('deleting worker %r', key)
        del self._workers[key]

    def run_worker(self, key, args):
        log.info('executing worker %r', key)
        try:
            worker = getattr(self, key[0])
            ret_args = worker(*args)
            signal = ret_args[0]
            signal_args = ret_args[1:]
            log.info('success executing worker %r', key)
            GObject.idle_add(self.on_success, key, signal, signal_args)
        except Exception as e:
            log.exception('error executing worker %r', key)
            GObject.idle_add(self.on_error, key, str(e))

    def on_success(self, key, signal, signal_args):
        self.remove_worker(key)
        if signal is not None:
            signal(*signal_args)

    def on_error(self, key, error):
        self.remove_worker(key)
        domain = repr(key)
        self.Error(domain, error)

    def render_job(self, job_id):
        cmd = [renderer, job_id]
        obj = json.loads(subprocess.check_output(cmd).decode('utf-8'))
        name = path.join(
            'Novacut',
            '{}.ogv'.format(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        )
        link = path.join(HOME, name)
        d = path.dirname(link)
        if not path.isdir(d):
            os.mkdir(d)
        target = obj['file_path']
        os.symlink(target, link)
        return (self.JobRendered, job_id, obj['file_id'], name)

    def hash_edit(self, project_id, node_id):
        db = Database(schema.DB_NAME, self.env)
        project = Database(schema.project_db_name(project_id), self.env)
        intrinsic_id = schema.save_to_intrinsic(node_id, project, db)
        return (self.EditHashed, project_id, node_id, intrinsic_id)

    def hash_job(self, intrinsic_id, settings_id):
        db = Database(schema.DB_NAME, self.env)
        job = schema.create_job(intrinsic_id, settings_id)
        job_id = job['_id']
        try:
            job = db.get(job_id)
        except NotFound:
            db.save(job)
        return (self.JobHashed, intrinsic_id, settings_id, job_id)

    def thumbnail(self, file_id, frames):
        cmd = [thumbnailer, file_id]
        cmd.extend(str(f) for f in frames)
        subprocess.check_call(cmd)
        return (self.ThumbnailFinished, file_id)

    @dbus.service.method(IFACE, in_signature='', out_signature='s')
    def Version(self):
        """
        Return Novacut version.
        """
        log.info('Version()')
        return novacut.__version__

    @dbus.service.method(IFACE, in_signature='', out_signature='i')
    def Kill(self):
        """
        Kill the `novacut-service` process.
        """
        log.info('Kill()')
        self.kill()
        return int(time.time() - start_time)

    @dbus.service.signal(IFACE, signature='ss')
    def Error(self, domain, error):
        log.error('@Error(%r, %r)', domain, error)

    @dbus.service.method(IFACE, in_signature='ss', out_signature='b')
    def HashEdit(self, project_id, node_id):
        project_id = str(project_id)
        node_id = str(node_id)
        log.info('HashEdit(%r, %r)', project_id, node_id)
        key = ('hash_edit', project_id, node_id)
        return self.start_worker(key, project_id, node_id)

    @dbus.service.signal(IFACE, signature='sss')
    def EditHashed(self, project_id, node_id, intrinsic_id):
        log.info('@EditHashed(%r, %r, %r)', project_id, node_id, intrinsic_id)

    @dbus.service.method(IFACE, in_signature='ss', out_signature='b')
    def HashJob(self, intrinsic_id, settings_id):
        intrinsic_id = str(intrinsic_id)
        settings_id = str(settings_id)
        log.info('HashJob(%r, %r)', intrinsic_id, settings_id)
        key = ('hash_job', intrinsic_id, settings_id)
        return self.start_worker(key, intrinsic_id, settings_id)

    @dbus.service.signal(IFACE, signature='sss')
    def JobHashed(self, intrinsic_id, settings_id, job_id):
        log.info('@JobHashed(%r, %r, %r)', intrinsic_id, settings_id, job_id)

    @dbus.service.method(IFACE, in_signature='s', out_signature='b')
    def RenderJob(self, job_id):
        """
        Render an edit.
        """
        job_id = str(job_id)
        log.info('RenderJob(%r)', job_id)
        key = ('render_job', job_id)
        return self.start_worker(key, job_id)

    @dbus.service.signal(IFACE, signature='sss')
    def JobRendered(self, job_id, file_id, link):
        log.info('@JobRendered(%r, %r, %r)', job_id, file_id, link)
        if Notify is None:
            return
        n = Notify.Notification.new('Render Complete', link, None)
        n.show()

    @dbus.service.method(IFACE, in_signature='sai', out_signature='b')
    def Thumbnail(self, file_id, frames):
        """
        Generate thumbnails.
        """
        file_id = str(file_id)
        frames = [int(i) for i in frames]
        log.info('Thumbnail(%r, %r)', file_id, frames)
        key = ('thumbnail', file_id)
        return self.start_worker(key, file_id, frames)

    @dbus.service.signal(IFACE, signature='s')
    def ThumbnailFinished(self, file_id):
        log.info('@ThumbnailFinished(%r)', file_id)


parser = optparse.OptionParser(
	version=novacut.__version__,
)
parser.add_option('--bus',
    help='DBus bus name; default is {!r}'.format(BUS),
    default=BUS
)
(options, args) = parser.parse_args()


novacut.configure_logging()
service = Service(options.bus)
try:
    service.run()
except Exception as e:
    log.exception('Error inside Service.run()')
    print('Error inside Service.run():')
    print(e)
    raise SystemExit(1)
finally:
    service.kill()
