#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
DBus service that exposes the render server.
"""

import time
start_time = time.time()

import optparse
import json
from os import path
from threading import Thread
import subprocess
import logging

import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GObject
import dmedia

import novacut


BUS = 'com.novacut.Renderer'
IFACE = BUS

GObject.threads_init()
DBusGMainLoop(set_as_default=True)
session = dbus.SessionBus()
log = logging.getLogger()


dirname = path.dirname(path.abspath(__file__))
renderer = path.join(dirname, 'novacut-renderer')
assert path.isfile(renderer)
thumbnailer = path.join(dirname, 'novacut-thumbnailer')
assert path.isfile(thumbnailer)


def _start_thread(target, *args):
    thread = Thread(target=target, args=args)
    thread.daemon = True
    thread.start()
    return thread


class Service(dbus.service.Object):
    def __init__(self, bus):
        self._workers = {}
        self._thumbnailers = {}
        self.bus = bus
        self.mainloop = GObject.MainLoop()
        super(Service, self).__init__(session, object_path='/')
        self.busname = dbus.service.BusName(bus, session)

    def run(self):
        self.mainloop.run()

    def kill(self):
        self.mainloop.quit()

    def render(self, job_id):
        cmd = [renderer, job_id]
        file_id = subprocess.check_output(cmd).decode('utf-8')
        GObject.idle_add(self.RenderFinished, job_id, file_id)

    def thumbnail(self, file_id, chunk):
        cmd = [thumbnailer, file_id, '--frame', str(chunk * 15)]
        subprocess.check_output(cmd)
        GObject.idle_add(self.ThumbnailFinished, file_id, chunk)

    @dbus.service.method(IFACE, in_signature='', out_signature='s')
    def Version(self):
        """
        Return Novacut version.
        """
        return novacut.__version__

    @dbus.service.method(IFACE, in_signature='', out_signature='i')
    def Kill(self):
        """
        Kill the `novacut-service` process.
        """
        self.kill()
        return int(time.time() - start_time)

    @dbus.service.method(IFACE, in_signature='s', out_signature='b')
    def Render(self, job_id):
        """
        Render an edit.
        """
        if job_id in self._workers:
            log.info('Render job %r is already running', job_id)
            return False
        log.info('Starting render job %r', job_id)
        self._workers[job_id] = _start_thread(self.render, job_id)
        return True

    @dbus.service.signal(IFACE, signature='ss')
    def RenderFinished(self, job_id, file_id):
        log.info('Render job %s has finished', job_id)
        del self._workers[job_id]

    @dbus.service.method(IFACE, in_signature='si', out_signature='b')
    def Thumbnail(self, file_id, chunk):
        """
        Render an edit.
        """
        log.info('Requested thumbnails for chunk %r in file %r', chunk, file_id)
        key = (file_id, chunk)
        if key in self._thumbnailers:
            return False
        self._thumbnailers[key] = _start_thread(self.thumbnail, file_id, chunk)
        return True

    @dbus.service.signal(IFACE, signature='si')
    def ThumbnailFinished(self, file_id, chunk):
        log.info('Thumbnails finished for chunk %r in file %r', chunk, file_id)
        key = (file_id, chunk)
        del self._thumbnailers[key]
    

parser = optparse.OptionParser(
	version=novacut.__version__,
)
parser.add_option('--bus',
    help='DBus bus name; default is {!r}'.format(BUS),
    default=BUS
)
(options, args) = parser.parse_args()


dmedia.configure_logging()
service = Service(options.bus)
try:
    service.run()
finally:
    service.kill()
