#!/usr/bin/python3

# novacut: the collaborative video editor
# Copyright (C) 2015 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
Validate timestamps in a video file.

Used to validate the correctness of a Novacut render.

Can also be used to check whether an input video will meet Novacut's current
expetations without first conforming the video.
"""

import argparse
from os import path
import json
import logging
import sys

from gi.repository import GLib

import novacut
from novacut.validate import Validator


parser = argparse.ArgumentParser()
parser.add_argument('--version', action='version', version=novacut.__version__)
parser.add_argument('filename', help='Path of video file to validate')
parser.add_argument('--debug', action='store_true', default=False,
    help='Turn on debug-level logging'
)
parser.add_argument('--full', action='store_true', default=False,
    help='Check full video (instead of stopping at first error)'
)
parser.add_argument('--strict', action='store_true', default=False,
    help='Do strict per-frame checking'
)
args = parser.parse_args()


logging.basicConfig(
    level=(logging.DEBUG if args.debug else logging.INFO),
    format='\t'.join([
        '%(levelname)s',
        '%(message)s',
    ]),
)
log = logging.getLogger()


filename = path.abspath(args.filename)
if not path.isfile(filename):
    log.error('Not a file: %r', filename)
    sys.exit(3)


mainloop = GLib.MainLoop()

def on_complete(validator, success):
    mainloop.quit()


validator = Validator(on_complete, filename, args.full, args.strict)
GLib.idle_add(validator.run)
mainloop.run()
info = json.dumps(validator.info, sort_keys=True, indent=4)
print(info)
if validator.success is not True:
    log.warning('NOT a conforming video!')
    sys.exit(4)

