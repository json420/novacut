#!/usr/bin/python3

import sys

from microfiber import Server, PreconditionFailed, NotFound, dc3_env

env = {
    'url': 'https://novacut.iriscouch.com/',
    'basic': {'username': 'U4JFH6U3FYI554UU', 'password': 'PGPJDS7QF37XMFWP'},
}
authurl = 'https://U4JFH6U3FYI554UU:PGPJDS7QF37XMFWP@novacut.iriscouch.com/'

env = 'http://192.168.69.2:5984/'
authurl = env


class Runner:
    def __init__(self):
        self.local =  Server(dc3_env())
        self.remote = Server(env)

    def _stop(self, _id):
        try:
            rev = self.local.get('_replicator', _id)['_rev']
            self.local.delete('_replicator', _id, rev=rev)
            print('  * stopped replication {!r}'.format(_id))
        except NotFound:
            pass

    def _restart(self, doc):
        self._stop(doc['_id'])
        self.local.post(doc, '_replicator')
        print('  * (re)started replication {!r}'.format(doc['_id']))

    def stop(self, name):
        for _id in [name + '_from_iris', name + '_to_iris']:
            self._stop(_id)

    def start(self, name):
        try:
            self.remote.put(None, name)
            print('  * created remote DB {!r}'.format(name))
        except PreconditionFailed:
            pass
        try:
            self.local.put(None, name)
            print('  * created local DB {!r}'.format(name))
        except PreconditionFailed:
            pass
        doc = {
            '_id': name + '_from_iris',
            'source': authurl + name,
            'target': name,
            'continuous': True,
        }
        self._restart(doc)
        doc = {
            '_id': name + '_to_iris',
            'target': authurl + name,
            'source': name,
            'continuous': True,
        }
        self._restart(doc)

    def delete(self, name):
        self.stop(name)
        try:
            self.remote.delete(name)
            print('  * deleted remote DB {!r}'.format(name))
        except NotFound:
            pass
        try:
            self.local.delete(name)
            print('  * deleted local DB {!r}'.format(name))
        except NotFound:
            pass

    def compact(self, name):
        print('  * compacting remote DB {!r}'.format(name))
        self.remote.post(None, name, '_compact')
        print('  * compacting local DB {!r}'.format(name))
        self.local.post(None, name, '_compact')


commands = {
    'start': 'Start replication with database DBNAME',
    'stop': 'Stop replication with database DBNAME',
    'delete': 'Delete both local and remote databases DBNAME',
    'compact': 'Compact both local and remote databases DBNAME',
}

if len(sys.argv) == 1:
    print('Commands:\n')
    for cmd in sorted(commands):
        print('{}\t{}'.format(cmd, commands[cmd]))
    print('')
    sys.exit()

if len(sys.argv) != 3:
    print('takes exactly 2 arguments COMMAND and DBNAME')
    sys.exit(1)
    
cmd = sys.argv[1]
name = sys.argv[2]

if cmd not in commands:
    print('invalid command: {}'.format(cmd))
    sys.exit(1)
    
r = Runner()
getattr(r, cmd)(name)

