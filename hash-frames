#!/usr/bin/python3

import sys
from os import path
import json
from hashlib import md5

import gi
gi.require_version('Gst', '1.0')
from gi.repository import GObject, Gst


GObject.threads_init()
Gst.init(None)


class FrameHasher:
    def __init__(self, src):
        self.frames = []
        self.mainloop = GObject.MainLoop()
        self.pipeline = Gst.Pipeline()

        self.bus = self.pipeline.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect('message::eos', self.on_eos)
        self.bus.connect('message::error', self.on_error)

        # Create elements
        self.src = Gst.ElementFactory.make('filesrc', None)
        self.dec = Gst.ElementFactory.make('decodebin', None)
        self.sink = Gst.ElementFactory.make('fakesink', None)

        # Add elements to pipeline
        for element in (self.src, self.dec, self.sink):        
            self.pipeline.add(element)

        # Set properties
        self.src.set_property('location', src)
        self.sink.set_property('signal-handoffs', True)

        # Connect signal handlers
        self.dec.connect('pad-added', self.on_pad_added)
        self.sink.connect('handoff', self.on_handoff)

        # Link elements
        self.src.link(self.dec)
        self.error = None

    def run(self):
        self.pipeline.set_state(Gst.State.PLAYING)
        self.mainloop.run()

    def kill(self):
        self.pipeline.set_state(Gst.State.NULL)
        self.mainloop.quit()

    def on_pad_added(self, element, pad):
        string = pad.query_caps(None).to_string()
        print(string)
        if string.startswith('video/'):
            pad.link(self.sink.get_static_pad('sink'))

    def on_handoff(self, element, buf, pad):
        map_info = buf.map_range(0, -1, Gst.MapFlags.READ)[1]
        data = map_info.to_bytes().unref_to_array()
        self.frames.append(md5(data).hexdigest())

    def on_eos(self, bus, msg):
        self.kill()

    def on_error(self, bus, msg):
        self.error = msg.parse_error()
        self.kill()


src = path.abspath(sys.argv[1])
dst = path.abspath(sys.argv[2])
hasher = FrameHasher(src)
hasher.run()
if hasher.error:
    sys.exit(hasher.error)
dst_fp = open(dst, 'w')
json.dump(hasher.frames, dst_fp, indent=4)
dst_fp.close()

