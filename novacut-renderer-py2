#!/usr/bin/python

# novacut: the collaborative video editor
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
Script to fire-off a render.
"""

from __future__ import print_function

import optparse
import json
import os
from os import path
import logging
from datetime import datetime
from fractions import Fraction
from collections import namedtuple

# We run at a fairly low priority, so the UI stays responsive:
os.nice(10)

import gobject
import gst
import dbus
from dbus.mainloop.glib import DBusGMainLoop
from dc3lib.microfiber import Database


gobject.threads_init()
DBusGMainLoop(set_as_default=True)
session = dbus.SessionBus()
HOME = path.abspath(os.environ['HOME'])
if not path.isdir(HOME):
    raise Exception('$HOME is not a directory: {!r}'.format(HOME))



def dumps(obj):
    return json.dumps(obj, sort_keys=True, indent=4)


def configure_logging():
    #logging.basicConfig(level=logging.DEBUG)
    #return logging.getLogger()
    script = path.abspath(__file__)
    namespace = path.basename(script)
    format = [
        '%(levelname)s',
        '%(processName)s',
        '%(threadName)s',
        '%(message)s',
    ]
    cache = path.join(HOME, '.cache', 'novacut')
    if not path.exists(cache):
        os.makedirs(cache)
    filename = path.join(cache, namespace + '.log')
    if path.exists(filename):
        os.rename(filename, filename + '.previous')
    logging.basicConfig(
        filename=filename,
        filemode='w',
        level=logging.DEBUG,
        format='\t'.join(format),
    )
    log = logging.getLogger()
    log.info('script: %r', script)
    return log


log = configure_logging()


SECOND = 1000000000

# namedtuple with pts, duration
Timestamp = namedtuple('Timestamp', 'pts duration')


def frame_to_nanosecond(frame, framerate):
    """
    Convert from frame to nanosecond (GStreamer time).

    >>> frame_to_nanosecond(30, Fraction(30000, 1001))
    1001000000

    """
    assert isinstance(framerate, Fraction)
    return frame * SECOND * framerate.denominator / framerate.numerator


assert frame_to_nanosecond(30, Fraction(30000, 1001)) == 1001000000
    
    
stream_map = {
    'video': 'video/x-raw-rgb',
    'audio': 'audio/x-raw-int; audio/x-raw-float',
}


def stream_caps(stream):
    return gst.caps_from_string(stream_map[stream])


def make_element(desc):
    """
    Create a GStreamer element and set its properties.

    For example:

    >>> enc = make_element({'name': 'theoraenc'})
    >>> enc.get_property('quality')
    48

    Or with properties:

    >>> enc = make_element({'name': 'theoraenc', 'props': {'quality': 40}})
    >>> enc.get_property('quality')
    40

    """
    if isinstance(desc, basestring):
        desc = {'name': desc}
    el = gst.element_factory_make(desc['name'])
    if desc.get('props'):
        for (key, value) in desc['props'].iteritems():
            el.set_property(key, value)
    return el


def caps_string(desc):
    """
    Build a GStreamer caps string.

    For example:

    >>> desc = {'mime': 'video/x-raw-yuv'}
    >>> caps_string(desc)
    'video/x-raw-yuv'

    Or with specific caps:

    >>> desc = {
    ...     'mime': 'video/x-raw-yuv',
    ...     'caps': {'width': 800, 'height': 450},
    ... }
    ...
    >>> caps_string(desc)
    'video/x-raw-yuv, height=450, width=800'

    """
    accum = [desc['mime']]
    if desc.get('caps'):
        caps = desc['caps']
        for key in sorted(caps):
            accum.append('{}={}'.format(key, caps[key]))
    return ', '.join(accum)


def make_caps(desc):
    if not desc:
        return None
    return gst.caps_from_string(caps_string(desc))



def to_gst_time(spec, doc):
    """
    Convert a time specified by frame or sample to nanoseconds.

    For example, both of these specify 2 seconds into a stream, first by frame,
    then by sample:

    >>> doc = {
    ...     'framerate': {'num': 24, 'denom': 1},
    ...     'samplerate': 48000,
    ... }
    ...
    >>> to_gst_time({'frame': 48}, doc)  #doctest: +ELLIPSIS
    2000000000...
    >>> to_gst_time({'sample': 96000}, doc)  #doctest: +ELLIPSIS
    2000000000...

    """
    if 'frame' in spec:
        num = doc['framerate']['num']
        denom = doc['framerate']['denom']
        return spec['frame'] * gst.SECOND * denom / num
    if 'sample' in spec:
        rate = doc['samplerate']
        return spec['sample'] * gst.SECOND / rate
    raise ValueError('invalid time spec: {!r}'.format(spec))


def get_framerate(clip):
    return Fraction(clip['framerate']['num'], clip['framerate']['denom'])
    


def build_slice(builder, doc, offset=0):
    node = doc['node']
    clip = builder.get_doc(node['src'])
    framerate = get_framerate(clip)
    start = frame_to_nanosecond(node['start'], framerate)
    stop = frame_to_nanosecond(node['stop'], framerate)
    duration = stop - start

#    if node['stream'] == 'both':
#        streams = ['video', 'audio']
#    else:
#        streams = [node['stream']]

    streams = ['video', 'audio']
    #streams = ['audio']

    for stream in streams:
        # Create the element, set the URI, and select the stream
        element = gst.element_factory_make('gnlurisource')
        element.set_property('uri', 'file://' + builder.resolve_file(clip['_id']))
        element.set_property('caps', stream_caps(stream))

        # These properties are about the slice itself
        element.set_property('media-start', start)
        element.set_property('media-duration', duration)

        # These properties are about the position of the slice in the composition
        element.set_property('start', offset)
        element.set_property('duration', duration)
        
        log.info('%s %d:%d %s', stream, start, duration, clip['_id'])

        builder.add(element, stream)
        
    return duration


def build_sequence(builder, doc, offset=0):
    sequence_duration = 0
    for src in doc['node']['src']:
        duration = builder.build(src, offset)
        offset += duration
        sequence_duration += duration
    return sequence_duration


_builders = {
    'video/slice': build_slice,
    'video/sequence': build_sequence,
}


class Builder(object):
    def __init__(self):
        self.last = None
        self.audio = None
        self.video = None

    def get_audio(self):
        if self.audio is None:
            self.audio = gst.element_factory_make('gnlcomposition')
        return self.audio

    def get_video(self):
        if self.video is None:
            self.video = gst.element_factory_make('gnlcomposition')
        return self.video

    def add(self, element, stream):
        assert stream in ('video', 'audio')
        if stream == 'video':
            target = self.get_video()
        else:
            target = self.get_audio()
        target.add(element)
        self.last = element

    def build(self, _id, offset=0):
        doc = self.get_doc(_id)
        log.info('node: %s %s', _id, dumps(doc['node']))
        func = _builders[doc['node']['type']]
        return func(self, doc, offset)

    def build_root(self, _id):
        duration = self.build(_id, 0)
        sources = filter(lambda s: s is not None, (self.video, self.audio))
        for src in sources:
            src.set_property('duration', duration)
        return sources

    def resolve_file(self, _id):
        pass

    def get_doc(self, _id):
        pass


class EncoderBin(gst.Bin):
    """
    Base class for `AudioEncoder` and `VideoEncoder`.
    """

    def __init__(self, d):
        super(EncoderBin, self).__init__()
        self._d = d

        # Create elements
        self._identity = self._make('identity', {'single-segment': True})
        self._q1 = self._make('queue')
        self._q2 = self._make('queue')
        self._q3 = self._make('queue')
        self._enc = self._make(d['encoder'])

        # Create the filter caps
        self._caps = make_caps(d.get('filter'))

        # Link elements
        self._identity.link(self._q1)
        if self._caps is None:
            self._q2.link(self._enc)
        else:
            self._q2.link(self._enc, self._caps)
        self._enc.link(self._q3)

        # Ghost Pads
        self.add_pad(
            gst.GhostPad('sink', self._identity.get_pad('sink'))
        )
        self.add_pad(
            gst.GhostPad('src', self._q3.get_pad('src'))
        )

    def __repr__(self):
        return '{}({!r})'.format(self.__class__.__name__, self._d)

    def _make(self, desc, props=None):
        """
        Create gst element, set properties, and add to this bin.
        """
        if isinstance(desc, basestring):
            desc = {'name': desc, 'props': props}
        el = make_element(desc)
        self.add(el)
        return el


class AudioEncoder(EncoderBin):
    def __init__(self, d):
        super(AudioEncoder, self).__init__(d)

        # Create elements:
        self._conv = self._make('audioconvert')
        self._rsp = self._make('audioresample', {'quality': 10})
        self._rate = self._make('audiorate')

        # Link elements:
        gst.element_link_many(
            self._q1, self._conv, self._rsp, self._rate, self._q2
        )


class VideoEncoder(EncoderBin):
    def __init__(self, d):
        super(VideoEncoder, self).__init__(d)

        # Create elements:
        self._scale = self._make('ffvideoscale', {'method': 10})
        self._color = self._make('ffmpegcolorspace')

        # Link elements:
        gst.element_link_many(self._q1, self._scale, self._color, self._q2)


class Renderer(object):
    def __init__(self, root, settings, builder, dst):
        """
        Initialize.

        :param job: a ``dict`` describing the transcode to perform.
        :param fs: a `FileStore` instance in which to store transcoded file
        """
        self.root = root
        self.settings = settings
        self.builder = builder
        self.mainloop = gobject.MainLoop()
        self.pipeline = gst.Pipeline()

        # Create bus and connect several handlers
        self.bus = self.pipeline.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect('message::eos', self.on_eos)
        self.bus.connect('message::error', self.on_error)

        # Create elements
        self.mux = make_element(settings['muxer'])
        self.sink = gst.element_factory_make('filesink')

        self.pipeline.add(self.mux)
        self.pipeline.add(self.sink)

        # Add elements to pipeline
        self.sources = builder.build_root(root)
        self.encoders = {}
        for key in ('video', 'audio'):
            src = getattr(builder, key)
            if src is None:
                continue
            self.encoders[key] = self.create_encoder(key)
            src.connect('pad-added', self.on_pad_added, key)
            self.pipeline.add(src)

        # Set properties
        self.sink.set_property('location', dst)

        # Link *some* elements
        # This is completed in self.on_pad_added()
        self.mux.link(self.sink)

        self.audio = None
        self.video = None
 
    def run(self):
        self.pipeline.set_state(gst.STATE_PLAYING)
        self.mainloop.run()

    def kill(self):
        self.pipeline.set_state(gst.STATE_NULL)
        self.pipeline.get_state()
        self.mainloop.quit()

    def create_encoder(self, key):
        if key in self.settings:
            klass = {'audio': AudioEncoder, 'video': VideoEncoder}[key]
            el = klass(self.settings[key])
        else:
            el = gst.element_factory_make('fakesink')
        self.pipeline.add(el)
        if key in self.settings:
            log.info(el)
            el.link(self.mux)
        return el

    def on_pad_added(self, element, pad, key):
        try:
            string = pad.get_caps().to_string()
            log.info('pad-added: %r %r', key, string)
            enc = self.encoders[key]
            pad.link(enc.get_compatible_pad(pad, pad.get_caps()))
        except Exception as e:
            log.exception('Error in Renderer.on_pad_added():')

    def on_eos(self, bus, msg):
        log.info('eos')
        self.kill()

    def on_error(self, bus, msg):
        error = msg.parse_error()[1]
        log.error(error)
        self.kill()


class LiveBuilder(Builder):
    def __init__(self, Dmedia, db):
        super(LiveBuilder, self).__init__()
        self.Dmedia = Dmedia
        self.db = db
        self._cache = {}

    def resolve_file(self, _id):
        (_id, status, filename) = self.Dmedia.Resolve(_id)
        return filename

    def get_doc(self, _id):
        try:
            return self._cache[_id]
        except KeyError:
            doc = self.db.get(_id)
            self._cache[_id] = doc
            return doc


class Worker(object):
    def __init__(self):
        self.Dmedia = session.get_object('org.freedesktop.Dmedia', '/')
        env = json.loads(self.Dmedia.GetEnv())
        env['url'] = env['url'].encode('utf-8')
        self.novacut = Database('novacut-1', env)
        self.dmedia = Database('dmedia-1', env)

    def run(self, job_id):
        job = self.novacut.get(job_id)
        log.info('Rendering: %s', dumps(job))
        root = job['node']['root']
        settings = self.novacut.get(job['node']['settings'])
        log.info('With settings: %s', dumps(settings['node']))
        builder = LiveBuilder(self.Dmedia, self.novacut)
        dst = self.Dmedia.AllocateTmp()
        renderer = Renderer(root, settings['node'], builder, dst)
        renderer.run()

        obj = self.Dmedia.HashAndMove(dst, 'render')
        _id = obj['file_id']
        doc = self.dmedia.get(_id)
        doc['render_of'] = job_id

        # Create the symlink
        ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        if settings['node'].get('ext'):
            ts += '.' + settings['node']['ext']
        name = path.join('Novacut', ts)
        link = path.join(HOME, name)
        d = path.dirname(link)
        if not path.isdir(d):
            os.mkdir(d)
        target = obj['file_path']
        os.symlink(target, link)
        doc['link'] = name

        self.dmedia.save(doc)
        job['renders'][_id] = {
            'bytes': doc['bytes'],
            'time': doc['time'],
            'link': name,
        }
        self.novacut.save(job)
        
        obj['link'] = name
        return obj


parser = optparse.OptionParser()
(options, args) = parser.parse_args()
job_id = args[0]

worker = Worker()
d = worker.run(job_id)
print(json.dumps(d, sort_keys=True, indent=4))
