#!/usr/bin/python

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
A quick and dirty GStreamer thumbnailer.
"""

from __future__ import print_function

import sys
from os import path
import json
from base64 import b64encode
import optparse


parser = optparse.OptionParser()
parser.add_option('--frame',
    type='int',
    help='thumbnail specific frame number, starting from zero; default=0',
    metavar='N',
    default=0,
)
(options, args) = parser.parse_args()


if len(args) != 1:
    print('takes exacly 1 argument FILE_ID', file=sys.stderr)
    sys.exit(1)
_id = args[0]


import dbus
import gst
import gobject
from dc3lib.microfiber import Database, NotFound


KEYFRAME = 5
FLOAT_SECOND = float(gst.SECOND)


def frame_to_ns(frame, num, denom):
    return frame * gst.SECOND * denom / num


def ns_to_frame(ns, num, denom):
    return int(round(ns * num / denom / FLOAT_SECOND))


gobject.threads_init()
session = dbus.SessionBus()
Dmedia = session.get_object('org.freedesktop.Dmedia', '/')
db = Database('thumbnails', json.loads(Dmedia.GetEnv()))
db.ensure()


class Thumbnailer(object):
    def __init__(self, filename, frame):
        self.frame = frame
        self.mainloop = gobject.MainLoop()
        self.pipeline = gst.Pipeline()
        self.count = 0
        self.attachments = {}
        self.framerate = None

        # Create bus and connect several handlers
        self.bus = self.pipeline.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect('message::eos', self.on_eos)
        self.bus.connect('message::error', self.on_error)

        # Create elements
        self.src = gst.element_factory_make('filesrc')
        self.dec = gst.element_factory_make('decodebin2')

        self.rate = gst.element_factory_make('videorate')
        self.scale = gst.element_factory_make('ffvideoscale')
        self.enc = gst.element_factory_make('jpegenc')
        self.sink = gst.element_factory_make('fakesink')

        # Set properties
        self.src.set_property('location', filename)
        self.scale.set_property('method', 10)
        self.enc.set_property('quality', 90)
        self.sink.set_property('signal-handoffs', True)

        # Signals
        self.dec.connect('pad-added', self.on_pad_added)
        self.sink.connect('handoff', self.on_handoff)
        self.rate.get_pad('sink').connect('notify::caps', self.on_notify_caps)

        # Add elements to pipeline
        self.pipeline.add(self.src)
        self.pipeline.add(self.dec)

        self.pipeline.add(self.rate)
        self.pipeline.add(self.scale)
        self.pipeline.add(self.enc)
        self.pipeline.add(self.sink)

        # Link elements
        self.src.link(self.dec)
        self.rate.link(self.scale)
        self.scale.link(self.enc, gst.caps_from_string('video/x-raw-yuv, height=126'))
        self.enc.link(self.sink)

    def seek_to_frame(self, frame):
        self.pipeline.seek_simple(
            gst.FORMAT_TIME,
            gst.SEEK_FLAG_FLUSH | gst.SEEK_FLAG_KEY_UNIT, #gst.SEEK_FLAG_ACCURATE,
            frame_to_ns(frame, self.framerate.num, self.framerate.denom)
        )

    def on_pad_added(self, element, pad):
        caps = pad.get_caps()[0]
        name = caps.get_name()
        print('on_pad_added', name)
        if name.startswith('video/'):
            pad.link(self.rate.get_pad('sink'))

    def on_notify_caps(self, pad, args):
        caps = pad.get_negotiated_caps()
        if not caps:
            return
        self.framerate = caps[0]['framerate']
        print('on_notify_caps', self.framerate)
        gobject.idle_add(self.seek_to_frame, self.frame)

    def on_handoff(self, element, buf, pad):
        frame = ns_to_frame(buf.timestamp, self.framerate.num, self.framerate.denom)
        print('handoff', frame)
        self.attachments[str(frame)] = {
            'content_type': 'image/jpeg',
            'data': b64encode(buf.data),
        }
        self.count += 1
        if frame >= self.frame and self.count >= KEYFRAME:
            print('done at count {}, frame {}'.format(self.count, frame))
            gobject.idle_add(self.kill)

    def run(self):
        self.pipeline.set_state(gst.STATE_PLAYING)
        self.mainloop.run()

    def kill(self):
        print('kill', file=sys.stderr)
        self.pipeline.set_state(gst.STATE_NULL)
        self.pipeline.get_state()
        self.mainloop.quit()

    def on_eos(self, bus, msg):
        print('eos', file=sys.stderr)
        self.kill()

    def on_error(self, bus, msg):
        error = msg.parse_error()[1]
        print(error, file=sys.stderr)
        self.kill()
        sys.exit(2)


filename = Dmedia.Resolve(_id)
thumbnailer = Thumbnailer(filename, options.frame)
thumbnailer.run()

try:
    doc = db.get(_id)
except NotFound:
    doc = {
        '_id': _id,
        '_attachments': {},
    }
doc['_attachments'].update(thumbnailer.attachments)
db.save(doc)



