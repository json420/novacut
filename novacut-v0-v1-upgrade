#!/usr/bin/python3

# novacut: the distributed video editor
# Copyright (C) 2013 Novacut Inc
#
# This file is part of `novacut`.
#
# `novacut` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# `novacut` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
# more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with `novacut`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

import sys
from copy import deepcopy
from subprocess import check_call

from microfiber import Server, NotFound, BulkConflict, dumps
from dmedia.service import get_env
from dmedia.util import init_views
from dmedia.metastore import BufferedSave

import novacut
from novacut import schema, migration, views

log = novacut.configure_logging()
env = get_env()

print('Calling `dmedia-v0-v1-upgrade`...')
check_call(['dmedia-v0-v1-upgrade'])

server = Server(env)
mdb = server.database('migrate-0-to-1')
src = server.database('novacut-0')
novacut_1 = server.database('novacut-1')
novacut_1.ensure()
buf = BufferedSave(novacut_1)


def get_file_id(old):
    if old['type'] == 'novacut/node' and old['node']['type'] == 'slice':
        return old['node']['src']
    if old['type'] == 'dmedia/file':
        return old['_id']


def migrate_novacut_project(v0_name, v0_id):
    project = None
    v1_id = migration.b32_to_db32(v0_id)
    v1_name = schema.project_db_name(v1_id)
    print('\n{} => {}'.format(v0_name, v1_name))

    src = server.database(v0_name)
    dst = server.database(v1_name)

    ids = []
    for row in src.get('_all_docs')['rows']:
        _id = row['id']
        if not _id.startswith('_'):
            ids.append(_id)

    id_map = {}
    docs = []
    for _id in ids:
        old = src.get(_id, attachments=True)
        docs.append(old)
        file_id = get_file_id(old)
        if not (file_id is None or file_id in id_map):
            try:
                mdoc = mdb.get(file_id)
                id_map[file_id] = mdoc['v1_id']
            except NotFound:
                print('NotFound:', file_id)
                print('Cannot migrate', v1_name)
                return

    # Let's do it
    src.post(None, '_compact')  # Clean up 
    dst.ensure()
    init_views(dst, views.novacut_projects)

    new_docs = []
    for old in docs:
        if old['type'] == 'novacut/bucket':
            print('Skipping deprecated novacut/bucket', old['_id'])
            continue
        new = None
        if old['type'] == 'novacut/node':
            node = old['node']
            if node['type'] == 'sequence':
                new = migration.migrate_sequence(old)
            elif node['type'] == 'slice':
                new = migration.migrate_slice(old, id_map)
            else:
                sys.exit("Error: Bad doc['node']['type']: {!r}".format(node['type']))
        elif old['type'] == 'novacut/project':
            new = migration.migrate_project(old)
            project = deepcopy(new)
        elif old['type'] == 'dmedia/file':
            new = migration.migrate_dmedia_file(old, id_map)
        else:
            sys.exit("Error: Bad doc['type']: {!r}".format(old['type']))

        assert new is not None
        new_docs.append(new)

    try:
        dst.save_many(new_docs)
    except BulkConflict as e:
        print(str(e))

    assert project is not None
    print('{} docs in {!r}'.format(len(new_docs), project.get('title')))
    return project


count = 0
failed = 0
for (v0_name, v0_id) in migration.iter_v0_project_dbs(server):
    count += 1
    project = migrate_novacut_project(v0_name, v0_id)
    if project is None:
        failed += 1
    else:
        buf.save(project)
buf.flush()


print('\n{} total projects, {} projects failed'.format(count, failed))
if failed == 0:
    print('Novacut V0 => V1 Upgrade Sucessfull!')
else:
    print('Error: Not all needed files were available.')
    print('Please connect any removable Dmedia drives, and then run:')
    print('    dmedia-v0-v1-upgrade')
    print('After than, run this command again:')
    print('    novacut-v0-v1-upgrade')
